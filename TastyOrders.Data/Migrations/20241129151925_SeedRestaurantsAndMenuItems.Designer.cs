// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TastyOrders.Data;

#nullable disable

namespace TastyOrders.Data.Migrations
{
    [DbContext(typeof(TastyOrdersDbContext))]
    [Migration("20241129151925_SeedRestaurantsAndMenuItems")]
    partial class SeedRestaurantsAndMenuItems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TastyOrders.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TastyOrders.Data.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("TastyOrders.Data.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("TastyOrders.Data.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Delicious plant-based burger",
                            ImageUrl = "/images/veggieBurger.jpg",
                            Name = "Veggie Burger",
                            Price = 12.99m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Delicious burger with fresh meat",
                            ImageUrl = "/images/beefBurger.jpg",
                            Name = "Beef Burger",
                            Price = 18.99m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Delicious burger with chicken and cheese",
                            ImageUrl = "/images/chickenBurger.jpg",
                            Name = "Chicken Burger",
                            Price = 15.99m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Classic Italian pasta with rich sauce",
                            ImageUrl = "/images/meatPasta.jpg",
                            Name = "Spaghetti Bolognese",
                            Price = 16.50m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 5,
                            Description = "Classic pizza with tomato, basil, and mozzarella",
                            ImageUrl = "/images/pizzaM.jpg",
                            Name = "Margherita Pizza",
                            Price = 11.99m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "Fresh lettuce with Caesar dressing",
                            ImageUrl = "/images/ceaserSalad.jpg",
                            Name = "Caesar Salad",
                            Price = 10.99m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "Our best seller",
                            ImageUrl = "/images/cheesecake.jpg",
                            Name = "Cheesecake",
                            Price = 8.99m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 8,
                            Description = "The richest chocolate taste you can find",
                            ImageUrl = "/images/chokoCake.jpg",
                            Name = "Chocolate cake",
                            Price = 7.99m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 9,
                            Description = "Tastiest cream brulee you can find",
                            ImageUrl = "/images/creamB.jpg",
                            Name = "Cream Brulee",
                            Price = 5.99m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 10,
                            Description = "A creamy and flavorful tomato soup with fresh basil.",
                            ImageUrl = "/images/tomatoBasilSoup.jpg",
                            Name = "Tomato Basil Soup",
                            Price = 5.49m,
                            RestaurantId = 4
                        },
                        new
                        {
                            Id = 11,
                            Description = "Loaded salad with chicken, bacon, avocado, eggs, and blue cheese.",
                            ImageUrl = "/images/cobbSalad.jpg",
                            Name = "Cobb Salad",
                            Price = 9.99m,
                            RestaurantId = 4
                        },
                        new
                        {
                            Id = 12,
                            Description = "Rich onion soup topped with a layer of melted cheese and croutons.",
                            ImageUrl = "/images/frenchOnionSoup.jpg",
                            Name = "French Onion Soup",
                            Price = 7.99m,
                            RestaurantId = 4
                        },
                        new
                        {
                            Id = 13,
                            Description = "Soft tacos filled with seasoned chicken and fresh toppings.",
                            ImageUrl = "/images/chickenTacos.jpg",
                            Name = "Chicken Tacos",
                            Price = 9.99m,
                            RestaurantId = 5
                        },
                        new
                        {
                            Id = 14,
                            Description = "Crispy battered fish served with cabbage slaw and a zesty lime crema.",
                            ImageUrl = "/images/fishTacos.jpg",
                            Name = "Fish Tacos",
                            Price = 11.49m,
                            RestaurantId = 5
                        },
                        new
                        {
                            Id = 15,
                            Description = "Slow-cooked beef barbacoa with fresh cilantro, onions, and lime.",
                            ImageUrl = "/images/beefBarbacoaTacos.jpg",
                            Name = "Beef Barbacoa Tacos",
                            Price = 8.99m,
                            RestaurantId = 5
                        },
                        new
                        {
                            Id = 16,
                            Description = "Perfectly grilled salmon served with a side of vegetables.",
                            ImageUrl = "/images/grilledSalmon.jpg",
                            Name = "Grilled Salmon",
                            Price = 15.99m,
                            RestaurantId = 6
                        },
                        new
                        {
                            Id = 17,
                            Description = "Juicy shrimp cooked in a garlic butter sauce, served over linguine.",
                            ImageUrl = "/images/shrimpScampi.jpg",
                            Name = "Shrimp Scampi",
                            Price = 19.99m,
                            RestaurantId = 6
                        },
                        new
                        {
                            Id = 18,
                            Description = "Grilled steak served with a side of crispy French fries.",
                            ImageUrl = "/images/steakFrites.jpg",
                            Name = "Steak Frites",
                            Price = 18.99m,
                            RestaurantId = 6
                        },
                        new
                        {
                            Id = 19,
                            Description = "Rich chocolate brownie topped with vanilla ice cream.",
                            ImageUrl = "/images/chocolateBrownie.jpg",
                            Name = "Chocolate Brownie",
                            Price = 5.99m,
                            RestaurantId = 7
                        },
                        new
                        {
                            Id = 20,
                            Description = "Stack of fluffy pancakes served with syrup and butter.",
                            ImageUrl = "/images/classicPancakes.jpg",
                            Name = "Classic Pancakes",
                            Price = 5.49m,
                            RestaurantId = 7
                        },
                        new
                        {
                            Id = 21,
                            Description = "Warm chocolate cake with a gooey molten center, served with ice cream.",
                            ImageUrl = "/images/chocolateLavaCake.jpg",
                            Name = "Chocolate Lava Cake",
                            Price = 6.99m,
                            RestaurantId = 7
                        },
                        new
                        {
                            Id = 22,
                            Description = "Creamy Alfredo sauce over perfectly cooked fettuccine.",
                            ImageUrl = "/images/fettuccineAlfredo.jpg",
                            Name = "Fettuccine Alfredo",
                            Price = 12.99m,
                            RestaurantId = 8
                        },
                        new
                        {
                            Id = 23,
                            Description = "Classic Italian pasta with creamy egg sauce, pancetta, and Parmesan cheese.",
                            ImageUrl = "/images/spaghettiCarbonara.jpg",
                            Name = "Spaghetti Carbonara",
                            Price = 12.99m,
                            RestaurantId = 8
                        },
                        new
                        {
                            Id = 24,
                            Description = "Spicy tomato-based pasta dish with penne, garlic, and red chili flakes.",
                            ImageUrl = "/images/penneArrabbiata.jpg",
                            Name = "Penne Arrabbiata",
                            Price = 11.49m,
                            RestaurantId = 8
                        },
                        new
                        {
                            Id = 25,
                            Description = "Classic pizza topped with pepperoni and melted mozzarella cheese.",
                            ImageUrl = "/images/pepperoniPizza.jpg",
                            Name = "Pepperoni Pizza",
                            Price = 13.99m,
                            RestaurantId = 9
                        },
                        new
                        {
                            Id = 26,
                            Description = "A blend of mozzarella, cheddar, Parmesan, and blue cheese on a crispy crust.",
                            ImageUrl = "/images/fourCheesePizza.jpg",
                            Name = "Four Cheese Pizza",
                            Price = 11.99m,
                            RestaurantId = 9
                        },
                        new
                        {
                            Id = 27,
                            Description = "Tender chicken, BBQ sauce, red onions, and cilantro on a wood-fired crust.",
                            ImageUrl = "/images/bbqChickenPizza.jpg",
                            Name = "BBQ Chicken Pizza",
                            Price = 13.49m,
                            RestaurantId = 9
                        });
                });

            modelBuilder.Entity("TastyOrders.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TastyOrders.Data.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("TastyOrders.Data.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "/images/smashBurger.png",
                            Location = "Sofia",
                            Name = "Smash Burgers"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "/images/italyRestaurant.jpg",
                            Location = "Varna",
                            Name = "Taste of Italy"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "/images/sweetPlace.jpg",
                            Location = "Veliko Tarnovo",
                            Name = "Sweet Place"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "/images/soupAndSaladRestaurant.jpg",
                            Location = "Sofia",
                            Name = "Soup & Salad"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "/images/tacoSpot.jpg",
                            Location = "Sofia",
                            Name = "Taco Spot"
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "/images/sunnyDiner.jpg",
                            Location = "Varna",
                            Name = "Sunny Diner"
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "/images/endorfino.jpg",
                            Location = "Varna",
                            Name = "Endorfino"
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "/images/pastaPlace.jpg",
                            Location = "Veliko Tarnovo",
                            Name = "Pasta Place"
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "/images/pizzaPlace.jpg",
                            Location = "Veliko Tarnovo",
                            Name = "Pizza Corner"
                        });
                });

            modelBuilder.Entity("TastyOrders.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TastyOrders.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TastyOrders.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TastyOrders.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TastyOrders.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TastyOrders.Data.Models.Cart", b =>
                {
                    b.HasOne("TastyOrders.Data.Models.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("TastyOrders.Data.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TastyOrders.Data.Models.CartItem", b =>
                {
                    b.HasOne("TastyOrders.Data.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TastyOrders.Data.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("TastyOrders.Data.Models.MenuItem", b =>
                {
                    b.HasOne("TastyOrders.Data.Models.Restaurant", "Restaurant")
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("TastyOrders.Data.Models.Order", b =>
                {
                    b.HasOne("TastyOrders.Data.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TastyOrders.Data.Models.OrderItem", b =>
                {
                    b.HasOne("TastyOrders.Data.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TastyOrders.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TastyOrders.Data.Models.Review", b =>
                {
                    b.HasOne("TastyOrders.Data.Models.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TastyOrders.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TastyOrders.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TastyOrders.Data.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("TastyOrders.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("TastyOrders.Data.Models.Restaurant", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
